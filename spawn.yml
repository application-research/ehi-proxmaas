---
- name: Spawn Proxmox virtual machines
  hosts: proxmox_clients
  connection: local

  vars_files:
    - "vars/production-ehi/{{ machine_details | default('dev-demo') }}.yml"

  tasks:
    - name: Check if repo-specific secrets file exists
      delegate_to: localhost
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/vars/secrets.yml"
      register: vault_password_file

    - name: If repo-specific secrets file exists, load it in
      delegate_to: localhost
      ansible.builtin.include_vars:
        file: "vars/secrets.yml"
      when: vault_password_file.stat.exists

    - name: Clear the value of temporary values in case we're running multiple times
      ansible.builtin.set_fact:
        list_of_target_ips: []
        starting_number_target: []
        vm_names: []

    - name: Ask the user what they want to name their VMs
      ansible.builtin.set_fact:
        vm_name: "{{ vm_name }}"
      when: vm_name is not defined or vm_name | length == 0

    - name: Check if the user has defined an invalid configuration
      ansible.builtin.assert:
        that:
          - not (list_of_ips is defined and ip_range is defined and list_of_ips|length > 0)

    - name: Set the starting number for the VMs if already defined
      ansible.builtin.set_fact:
        starting_number_target: "{{ starting_number }}"
      when: starting_number is defined

    - name: Set the starting number for the VMs
      ansible.builtin.pause:
        prompt: "Enter the starting number for the VMs (e.g. 01 if it's a new deployment, 04 if there are already 3 machines, etc.)"
      register: temp_starting_number
      when: starting_number_target is not defined

    - name: Set starting_number based on given user input
      ansible.builtin.set_fact:
        starting_number_target: "{{ temp_starting_number.input }}"
      when: temp_starting_number is defined and temp_starting_number.input is defined

    - name: Dynamically build list_of_target_ips if we have a range of IPs
      ansible.builtin.set_fact:
        list_of_target_ips: "{{ list_of_target_ips | default([]) + (item.start | ip_list_from_range(item.end)) }}"
      loop: "{{ ip_range }}"
      when: list_of_ips is not defined or list_of_ips | length == 0

    - name: Statically build list_of_target_ips if we have a list of IPs
      ansible.builtin.set_fact:
        list_of_target_ips: "{{ list_of_target_ips | default([]) + (item.start | ip_list_from_range(item.end)) }}"
      loop: "{{ ip_range }}"
      when: list_of_ips is defined and list_of_ips | length > 0

    - name: Calculate the number of VMs to create if we have a list of IPs
      ansible.builtin.set_fact:
        vm_count: "{{ list_of_target_ips | length }}"
      when: list_of_target_ips | length > 0

    - name: Set the number of VMs to create
      ansible.builtin.pause:
        prompt: "Enter the number of VMs you want to create"
      register: temp_vm_count
      when: (vm_count is not defined or vm_count | length == 0) and list_of_ips | length == 0

    - name: Set starting_number based on given user input
      ansible.builtin.set_fact:
        starting_number: "{{ temp_vm_count.input }}"
      when: temp_vm_count is defined and temp_vm_count.input is defined

    - name: Create a list of VM names
      ansible.builtin.set_fact:
        vm_names: "{{ vm_names | default([]) + [vm_name ~ '%02d' | format(item)] }}"
      loop: "{{ range(starting_number_target | int, vm_count | int + starting_number_target | int) | list }}"

    - name: Display the list of VM names
      ansible.builtin.debug:
        msg: "We will be creating the following VMs: {{ vm_names }}"

    - name: Create the requested VMs
      delegate_to: localhost
      community.general.proxmox_kvm:
        api_user: "{{ proxmox_user }}"
        api_token_id: "{{ proxmox_token_id }}"
        api_token_secret: "{{ proxmox_token_secret }}"
        # api_password: "{{ proxmox_password }}"
        api_host: proxmox.estuary.tech
        timeout: 60
        name: "{{ vm_name }}{{ '%02d' | format(item) }}"
        memory: "{{ amount_of_memory | int }}"
        balloon: "{{ minimum_memory | default(0) | int }}"
        cores: "{{ number_of_vcpus | int }}"
        agent: true
        description: "{{ vm_description | default('A VM spawned by ProxMAAS and Ansible') }}"
        onboot: false
        # Set machines to boot from network first, then hard disk
        boot: nc
        cpu: host
        node: "{{ proxmox_nodes[item % 8] }}"
        scsihw: "virtio-scsi-single"
        scsi: "{{ scsi_disk_layout }}"
        net:
          net0: 'bridge=vmbr0,virtio,mtu=1,firewall=1'
        bios: ovmf
        efidisk0:
          storage: vm-storage
          format: raw
          efitype: 4m
          pre_enrolled_keys: false
        update: true
      loop: "{{ range(starting_number_target | int, vm_count | int + starting_number_target | int) | list }}"
      register: vm_result

    - name: Print vm_result
      ansible.builtin.debug:
        msg: "{{ vm_result }}"

    - name: Create an empty dictionary for MAC addresses
      ansible.builtin.set_fact:
        vm_details: {}

    - name: Extract vmid, mac, and name for each item in vm_result.results
      ansible.builtin.include_tasks: tasks/create_vm_details.yml
      loop: "{{ vm_result.results }}"
      loop_control:
        label: "Extracting vmid, mac, and name from vm_result for VMID {{ item.vmid }}"

    - name: Print list of target IPs
      ansible.builtin.debug:
        var: list_of_target_ips

    - name: Add IP address to vm_details
      ansible.builtin.set_fact:
        vm_details: "{{ vm_details | combine({item.0.key: item.0.value | combine({'ipv4': item.1})}, recursive=True) }}"
      loop: "{{ (vm_details | dict2items | list) | zip(list_of_target_ips) }}"
      loop_control:
        label: "{{ item.0.key }}"

    - name: Add dns_record_type to vm_details
      ansible.builtin.set_fact:
        vm_details: "{{ vm_details | combine({item.key: item.value | combine({'dns_record_type': dns_record_type})}, recursive=True) }}"
      loop: "{{ vm_details | dict2items }}"
      when: dns_record_type is defined

    - name: Add dns_fqdn to vm_details
      ansible.builtin.set_fact:
        vm_details: "{{ vm_details | combine({item.key: item.value | combine({'dns_fqdn': item.value.name ~ '.' ~ dns_domain})}, recursive=True) }}"
      loop: "{{ vm_details | dict2items }}"
      when: dns_domain is defined

    - name: DEBUG - Print vm_details
      ansible.builtin.debug:
        msg: "{{ vm_details }}"

    - name: Set facts for DNS record types
      ansible.builtin.set_fact:
        a_record_string: "A"
        cname_record_string: "CNAME"

    - name: Add any A DNS records with Technitium for each VM
      delegate_to: localhost
      ansible.builtin.script: >
        {{ playbook_dir }}/scripts/technitium_upsert.py
        --dns_fqdn '{{ item.value.dns_fqdn }}'
        --dns_record_type '{{ item.value.dns_record_type }}'
        --dns_record_value '{{ item.value.ipv4 }}'
        --technitium_url '{{ technitium_url }}'
        --technitium_api_key '{{ technitium_api_key }}'
      when: ( item.value.dns_record_type is defined ) and ( item.value.dns_record_type == a_record_string )
      loop: "{{ vm_details | dict2items }}"
      loop_control:
        label: "Creating DNS record for {{ item.value.name }}"

    - name: Add any CNAME DNS records with Technitium for each VM
      delegate_to: localhost
      ansible.builtin.script: >
        {{ playbook_dir }}/scripts/technitium_upsert.py
        --dns_fqdn '{{ item.value.dns_fqdn }}'
        --dns_record_type '{{ item.value.dns_record_type }}'
        --dns_record_value '{{ dns_record_value }}'
        --technitium_url '{{ technitium_url }}'
        --technitium_api_key '{{ technitium_api_key }}'
      when: ( item.value.dns_record_type is defined ) and ( item.value.dns_record_type == cname_record_string ) and ( dns_record_value is defined )
      loop: "{{ vm_details | dict2items }}"
      loop_control:
        label: "Creating DNS record for {{ item.value.name }}"

    - name: Skip all remaining tasks in playbook if no VMs were created # noqa no-handler
      ansible.builtin.meta: end_play
      when: vm_result.changed is false

    - name: Sleep for 10 seconds to let VMs spawn in
      ansible.builtin.pause:
        seconds: 10

    - name: Start the requested VMs # noqa no-handler
      delegate_to: localhost
      community.general.proxmox_kvm:
        api_user: "{{ proxmox_user }}"
        api_token_id: "{{ proxmox_token_id }}"
        api_token_secret: "{{ proxmox_token_secret }}"
        # api_password: "{{ proxmox_password }}"
        api_host: proxmox.estuary.tech
        timeout: 60
        name: "{{ vm_name }}{{ '%02d' | format(item.item) }}"
        state: started
      loop: "{{ vm_result.results }}"
      when: item is changed

    - name: Wait for 180 seconds before proceeding
      ansible.builtin.pause:
        seconds: 180

    - name: Run custom MAAS poker to inject Proxmox BMC credentials and correct node name and commission the nodes
      delegate_to: localhost
      ansible.builtin.script: >
        "{{ playbook_dir }}/scripts/maas_commission.py"
        --proxmox_token_id "{{ proxmox_token_id }}"
        --proxmox_token_secret "{{ proxmox_token_secret }}"
        --proxmox_user "{{ proxmox_user }}"
        --maas_url "{{ maas_url }}"
        --maas_api_key "{{ maas_api_key | string }}"
        --vm_details '{{ vm_details | to_json }}'

    - name: Wait for 180 seconds before proceeding
      ansible.builtin.pause:
        seconds: 180
      when: not (wait_for_user | default(false))

    - name: Wait until the user says it's okay to continue
      ansible.builtin.pause:
        prompt: "Please make any required IP changes to your nodes inside MAAS, then press enter when ready"
      when: (wait_for_user | default(false))

    - name: Run custom MAAS poker to deploy the nodes
      delegate_to: localhost
      ansible.builtin.script: >
        "{{ playbook_dir }}/scripts/maas_deploy.py"
        --maas_url "{{ maas_url }}"
        --maas_api_key "{{ maas_api_key | string }}"
        --vm_details '{{ vm_details | to_json }}'
